#include <WiFi.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <AccelStepper.h>
#include <Wire.h>
#include <SPIFFS.h>
#include <Keypad.h>
#include <EEPROM.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

const char *ssid = "mypc";
const char *password_wifi = "11111111";

const char *server_rfid_url = "http://192.168.137.88/api/rfid.php";
const char *server_pass_url = "http://192.168.137.88/api/save_password.php";
String apiKeyValue = "tPmAT5Ab3j7F9";

bool screenUpdated = false;
unsigned char id = 0;
unsigned char id_rf = 0;
unsigned char index_t = 0;
unsigned char error_in = 0;
unsigned char in_num = 0, error_pass = 0, isMode = 0;
byte firstScanTag[4] = {0}; // Bi·∫øn l∆∞u d·ªØ li·ªáu UID c·ªßa th·∫ª qu√©t l·∫ßn 1

// üõ† Keypad 4x4
const byte ROWS = 4, COLS = 4;
char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}};
byte rowPins[4] = {13, 12, 14, 27}; // ‚úÖ H√†ng - S·ª≠ d·ª•ng GPIO h·ª£p l·ªá
byte colPins[4] = {16, 17, 4, 15};  // ‚úÖ C·ªôt - ƒê·∫£m b·∫£o GPIO h·ª£p l·ªá

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// üõ† Stepper Motor 28BYJ-48 (ULN2003)
#define IN1 32
#define IN2 33
#define IN3 25
#define IN4 26
AccelStepper stepper(AccelStepper::HALF4WIRE, IN1, IN3, IN2, IN4);
const byte RFID_SIZE = 4;
int addr = 0;
char password[6] = "11111";
char pass_def[6] = "12395";
char mode_changePass[6] = "*#01#";
char mode_resetPass[6] = "*#02#";
char mode_hardReset[6] = "*#03#";
char mode_addRFID[6] = "*101#";
char mode_delRFID[6] = "*102#";
char mode_delAllRFID[6] = "*103#";
char data_input[6];
char new_pass1[6];
char new_pass2[6];
// üõ† SPI cho GC9A01(VSPI)
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define SCREEN_ADDRESS 0x3C // ƒê·ªãa ch·ªâ I2C m·∫∑c ƒë·ªãnh c·ªßa OLED
// üìå Khai b√°o ƒë·ªãa ch·ªâ I2C c·ªßa OLED (th∆∞·ªùng l√† 0x3C)
#define OLED_ADDRESS 0x3C

// üìå Kh·ªüi t·∫°o m√†n h√¨nh OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// üõ† SPI cho RFID (HSPI)
// ‚ö° Chuy·ªÉn Module RFID RC522 sang HSPI
#define SS_PIN 5
#define RST_PIN 2
MFRC522 rfid(SS_PIN, RST_PIN); // Ch√¢n SS v√† RST c·ªßa RFID

MFRC522::MIFARE_Key key;
byte nuidPICC[4];
typedef enum
{
  MODE_ID_RFID_ADD,
  MODE_ID_RFID_FIRST,
  MODE_ID_RFID_SECOND,
} MODE_ID_RFID_E;

// unsigned char MODE = MODE_ID_FINGER_ADD; // Mode = 3
unsigned char MODE_RFID = MODE_ID_RFID_ADD;
void writeEpprom(char data[])
{
  for (unsigned char i = 0; i < 5; i++)
  {
    EEPROM.write(i, data[i]);
  }
  EEPROM.commit();
}

// üìå ƒê·ªçc m·∫≠t kh·∫©u t·ª´ EEPROM
void readEpprom()
{
  for (unsigned char i = 0; i < 5; i++)
  {
    password[i] = EEPROM.read(i);
  }
}

// üìå X√≥a d·ªØ li·ªáu nh·∫≠p
void clear_data_input() // xoa gia tri nhap vao hien tai
{
  int i = 0;
  for (i = 0; i < 6; i++)
  {
    data_input[i] = '\0';
  }
}
void displayMessage(String message, uint16_t color)
{
  display.clearDisplay();
  display.setTextSize(1);              // OLED s·ª≠ d·ª•ng setTextSize(1) l√† ƒë·ªß
  display.setTextColor(SSD1306_WHITE); // OLED ch·ªâ c√≥ ƒë∆°n s·∫Øc
  display.setCursor(0, 10);
  display.println(message);
  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh
}

bool isBufferdata(char data[])
{
  for (unsigned char i = 0; i < 5; i++)
  {
    if (data[i] == '\0')
    {
      return false;
    }
  }
  return true;
}

// üìå So s√°nh hai buffer
bool compareData(char data1[], char data2[]) // Kiem tra 2 cai buffer co giong nhau hay khong
{
  unsigned char i = 0;
  for (i = 0; i < 5; i++)
  {
    if (data1[i] != data2[i])
    {
      return false;
    }
  }
  return true;
}

// üìå G√°n buffer t·ª´ data2 sang data1
void insertData(char data1[], char data2[])
{
  for (unsigned char i = 0; i < 5; i++)
  {
    data1[i] = data2[i];
  }
}
void displayPassword()
{
  display.clearDisplay();              // X√≥a m√†n h√¨nh tr∆∞·ªõc khi v·∫Ω n·ªôi dung m·ªõi
  display.setTextSize(1);              // OLED nh·ªè, text size = 1 l√† ƒë·ªß
  display.setTextColor(SSD1306_WHITE); // M√†u tr·∫Øng tr√™n n·ªÅn ƒëen
  display.setCursor(10, 10);
  display.print("ENTER PASSWORD:");

  // Hi·ªÉn th·ªã d·∫•u '*' ƒë·∫°i di·ªán cho m·∫≠t kh·∫©u ƒë√£ nh·∫≠p
  display.setCursor(30, 30);
  for (byte i = 0; i < in_num; i++)
  {
    display.print("*");
  }

  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh
}

void openDoor()
{
  // Hi·ªÉn th·ªã th√¥ng b√°o m·ªü c·ª≠a tr√™n OLED
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.print("OPENING DOOR...");
  display.display();

  // C·∫•u h√¨nh Stepper Motor
  stepper.setMaxSpeed(500);
  stepper.setAcceleration(300);
  stepper.move(4096); // Quay 360 ƒë·ªô ƒë·ªÉ m·ªü c·ª≠a
  while (stepper.distanceToGo() != 0)
    stepper.run();

  delay(3000); // Gi·ªØ c·ª≠a m·ªü trong 3 gi√¢y

  // Hi·ªÉn th·ªã th√¥ng b√°o ƒë√≥ng c·ª≠a tr√™n OLED
  display.clearDisplay();
  display.setCursor(10, 10);
  display.print("DOOR CLOSING...");
  display.display();

  stepper.move(-4096); // Quay ng∆∞·ª£c l·∫°i ƒë·ªÉ ƒë√≥ng c·ª≠a
  while (stepper.distanceToGo() != 0)
    stepper.run();

  index_t = 0;
}

// üîë Nh·∫≠n d·ªØ li·ªáu t·ª´ b√†n ph√≠m v√† hi·ªÉn th·ªã tr√™n TFT
void getData()
{
  char key = keypad.getKey(); // ƒê·ªçc gi√° tr·ªã b√†n ph√≠m
  if (key)
  {
    Serial.print("Ph√≠m b·∫•m: ");
    Serial.println(key);

    if (in_num < 5)
    {
      data_input[in_num] = key; // L∆∞u v√†o m·∫£ng nh·∫≠p li·ªáu

      // Hi·ªÉn th·ªã s·ªë v·ª´a nh·∫≠p tr∆∞·ªõc
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(20 + in_num * 12, 20); // D·ªãch t·ª´ng k√Ω t·ª± sang ph·∫£i
      display.print(key);
      display.display();

      delay(500); // Ch·ªù 500ms tr∆∞·ªõc khi thay b·∫±ng *

      // C·∫≠p nh·∫≠t l·∫°i ch·ªâ **s·ªë ƒë√≥** th√†nh d·∫•u *
      display.setCursor(20 + in_num * 12, 20);
      display.print("*");
      display.display();

      in_num++;

      if (in_num == 5)
      { // Khi nh·∫≠p ƒë·ªß 5 s·ªë
        Serial.print("M·∫≠t kh·∫©u nh·∫≠p: ");
        Serial.println(data_input);
        in_num = 0; // Reset b·ªô ƒë·∫øm
      }
    }
  }
}

void checkPass()
{
  getData();

  if (isBufferdata(data_input))
  {
    Serial.print("üîé Data Input: ");
    Serial.println(data_input);

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 10);

    if (compareData(data_input, password)) // N·∫øu ƒë√∫ng m·∫≠t kh·∫©u
    {
      display.print("ACCESS GRANTED");
      index_t = 3;
      Serial.println("üîÑ index_t SET TO 3 - READY TO OPEN DOOR");
    }
    else if (compareData(data_input, mode_changePass)) // ƒê·ªïi m·∫≠t kh·∫©u
    {
      display.print("CHANGE PASS MODE");
      index_t = 1;
    }
    else if (compareData(data_input, mode_resetPass)) // Reset m·∫≠t kh·∫©u
    {
      display.print("RESET PASS");
      index_t = 2;
    }
    else if (compareData(data_input, mode_hardReset)) // Hard Reset
    {
      display.print("HARD RESET");
      writeEpprom(pass_def);
      insertData(password, pass_def);
      delay(2000);

      display.clearDisplay();
      display.setCursor(10, 10);
      display.print("SYSTEM RESET");
      index_t = 0;
    }
    else if (compareData(data_input, mode_addRFID)) // Th√™m th·∫ª RFID
    {
      display.setTextSize(1);
      display.print("ADD RFID MODE");
      index_t = 8;
    }
    else if (compareData(data_input, mode_delRFID)) // X√≥a RFID
    {
      display.setTextSize(1);
      display.print("DELETE RFID");
      index_t = 9;
    }
    else if (compareData(data_input, mode_delAllRFID)) // X√≥a t·∫•t c·∫£ RFID
    {
      display.setTextSize(1);
      display.print("DELETE ALL RFID");
      index_t = 10;
    }
    else // M·∫≠t kh·∫©u sai
    {
      if (error_pass >= 2)
      {
        display.setTextSize(1);
        display.print("ACCESS BLOCKED");
        delay(3000);
        index_t = 4;
      }
      else
      {
        display.setTextSize(1);
        display.print("WRONG PASSWORD");
        error_pass++;
        delay(1000);
        display.setTextSize(1);
        display.clearDisplay();
        display.setCursor(10, 10);
        display.print("ENTER PASSWORD");
      }
    }

    display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

    // Ch·ªâ x√≥a d·ªØ li·ªáu nh·∫≠p khi ƒë√£ ki·ªÉm tra xong
    clear_data_input();
  }
}

// üîí X·ª≠ l√Ω nh·∫≠p sai 3 l·∫ßn - kh√≥a h·ªá th·ªëng 30 gi√¢y
void error()
{
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(20, 10);
  display.println("WRONG 3 TIMES");
  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

  delay(2000);

  display.clearDisplay();
  display.setCursor(20, 10);
  display.println("WAIT 30 SEC");
  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

  unsigned char i = 30;
  while (i > 0)
  {
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(10, 20);
    display.println("WAIT:");

    display.setCursor(50, 50);
    display.setTextSize(3);
    display.print(i);
    display.print("s");

    display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED
    i--;
    delay(1000);
  }

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(20, 10);
  display.println("ENTER PASSWORD");
  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

  index_t = 0;
}

void changePass() // Thay ƒë·ªïi m·∫≠t kh·∫©u
{
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  display.setCursor(10, 10);
  display.println("CHANGE PASSWORD");
  display.display();
  delay(3000);

  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("ENTER NEW PASS");
  display.display();

  while (1)
  {
    getData();
    if (isBufferdata(data_input))
    {
      insertData(new_pass1, data_input);
      clear_data_input();
      break;
    }
  }

  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("ENTER AGAIN");
  display.display();

  while (1)
  {
    getData();
    if (isBufferdata(data_input))
    {
      insertData(new_pass2, data_input);
      clear_data_input();
      break;
    }
  }

  delay(1000);
  if (compareData(new_pass1, new_pass2)) // N·∫øu m·∫≠t kh·∫©u tr√πng kh·ªõp
  {
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 10);
    display.println("PASSWORD SAVED");
    display.display();

    delay(1000);
    writeEpprom(new_pass2);
    insertData(password, new_pass2);

    display.clearDisplay();
    display.display();
    index_t = 0;
  }
  else // N·∫øu m·∫≠t kh·∫©u kh√¥ng tr√πng
  {
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 10);
    display.println("MISMATCHED!");
    display.display();

    delay(1000);
    display.clearDisplay();
    display.display();
    index_t = 0;
  }
}

void resetPass()
{
  unsigned char choise = 0;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  display.setCursor(10, 10);
  display.println("RESET PASSWORD");
  display.display();

  getData();
  if (isBufferdata(data_input))
  {
    if (compareData(data_input, password))
    {
      display.clearDisplay();
      clear_data_input();

      while (1)
      {
        display.clearDisplay();
        display.setTextColor(SSD1306_WHITE);
        display.setTextSize(2);
        display.setCursor(10, 10);
        display.println("RESET PASSWORD");

        if (choise == 0)
        {
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(20, 40);
          display.println("> YES");

          display.setTextColor(SSD1306_WHITE);
          display.setCursor(20, 60);
          display.println("  NO");
        }
        else
        {
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(20, 40);
          display.println("  YES");

          display.setTextColor(SSD1306_WHITE);
          display.setCursor(20, 60);
          display.println("> NO");
        }

        display.display();

        char key = keypad.getKey();
        if (key == '*')
        {
          choise = (choise == 1) ? 0 : 1;
        }

        if (key == '#' && choise == 0) // Ch·ªçn YES - Reset m·∫≠t kh·∫©u
        {
          display.clearDisplay();
          delay(1000);
          writeEpprom(pass_def);
          insertData(password, pass_def);

          display.setTextColor(SSD1306_WHITE);
          display.setCursor(10, 30);
          display.println("RESET DONE");
          display.display();

          delay(1000);
          display.clearDisplay();
          display.display();
          break;
        }

        if (key == '#' && choise == 1) // Ch·ªçn NO - Tho√°t
        {
          display.clearDisplay();
          display.display();
          break;
        }
      }
      index_t = 0;
    }
    else
    {
      index_t = 0;
      display.clearDisplay();
      display.display();
    }
  }
}

unsigned char numberInput()
{
  char number[5] = {0};
  char count_i = 0;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(10, 10);
  display.println("ENTER NUMBER:");
  display.display();

  while (count_i < 2)
  {
    char key = keypad.getKey();
    if (key && key != 'A' && key != 'B' && key != 'C' && key != 'D' && key != '*' && key != '#')
    {
      delay(100);

      // Hi·ªÉn th·ªã s·ªë nh·∫≠p v√†o
      display.setCursor(30 + (count_i * 15), 40);
      display.setTextSize(3);
      display.setTextColor(SSD1306_WHITE);
      display.print(key);
      display.display();

      number[count_i] = key;
      count_i++;
    }
  }

  return (number[0] - '0') * 10 + (number[1] - '0'); // Chuy·ªÉn chu·ªói th√†nh s·ªë nguy√™n
}

void checkEEPROM()
{
  Serial.println("üîç Ki·ªÉm tra EEPROM l∆∞u th·∫ª RFID...");

  for (int i = 10; i < 50; i += 4) // Duy·ªát qua t·ª´ng th·∫ª RFID trong EEPROM
  {
    Serial.print("üìå ID ");
    Serial.print((i - 10) / 4 + 1); // T√≠nh s·ªë th·ª© t·ª± th·∫ª RFID
    Serial.print(": ");

    bool empty = true; // Bi·∫øn ki·ªÉm tra n·∫øu t·∫•t c·∫£ gi√° tr·ªã = 0

    for (int j = 0; j < 4; j++)
    {
      byte data = EEPROM.read(i + j);
      Serial.print(data, HEX);
      Serial.print(" ");

      if (data != 0xFF && data != 0x00) // N·∫øu c√≥ d·ªØ li·ªáu h·ª£p l·ªá
      {
        empty = false;
      }
    }

    if (empty)
    {
      Serial.print(" -> (Tr·ªëng)");
    }

    Serial.println();
  }
}

bool isAllowedRFIDTag(byte tag[])
{
  int count = 0;
  for (int i = 10; i < 512; i += 4)
  {
    Serial.print("EEPROM: ");
    for (int j = 0; j < 4; j++)
    {
      Serial.print(EEPROM.read(i + j), HEX);
      if (tag[j] == EEPROM.read(i + j))
      {
        count++;
      }
    }
    Serial.println();
    if (count == 4)
    {
      return true; // Th·∫ª ƒë√£ t·ªìn t·∫°i
    }
    count = 0;
  }
  return false;
}

void rfidCheck()
{
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())
  {
    byte rfidTag[4];
    Serial.print("RFID TAG: ");
    for (byte i = 0; i < rfid.uid.size; i++)
    {
      rfidTag[i] = rfid.uid.uidByte[i];
      Serial.print(rfidTag[i], HEX);
      Serial.print(" ");
    }
    Serial.println();

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(2);
    display.setCursor(10, 10);

    if (isAllowedRFIDTag(rfidTag))
    {
      display.println("RFID ACCESS");
      display.setCursor(20, 40);
      display.println("GRANTED");
      index_t = 3;
    }
    else
    {
      if (error_pass == 2)
      {
        display.println("SYSTEM");
        display.setCursor(20, 40);
        display.println("LOCKED");
        index_t = 4;
      }
      else
      {
        Serial.println("Error");
        display.println("WRONG RFID");
        error_pass++;
        delay(1000);
      }
    }

    display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
}

void handleWrongRFID()
{
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  display.setCursor(10, 10);

  if (error_pass == 2)
  {
    display.println("SYSTEM");
    display.setCursor(20, 40);
    display.println("LOCKED");
    index_t = 4;
  }
  else
  {
    Serial.println("Error: Wrong RFID");
    display.println("WRONG RFID");
    error_pass++;
  }

  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED
  delay(1000);
}

// Khai b√°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u th·∫ª qu√©t l·∫ßn 1

void addRFID()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(25, 0);
  display.println("ADD NEW RFID");
  display.display();

  Serial.println("üìå ADD_RFID MODE");

  switch (MODE_RFID)
  {
  case MODE_ID_RFID_ADD:
  {
    Serial.println("üìå Nh·∫≠p ID th·∫ª...");

    display.setCursor(0, 20);
    display.println("Input ID:");
    display.display();

    id_rf = numberInput();
    Serial.println(id_rf);

    if (id_rf == 0)
    {
      display.clearDisplay();
      display.setCursor(20, 30);
      display.println("ID ERROR");
      display.display();
      delay(2000);
    }
    else
    {
      MODE_RFID = MODE_ID_RFID_FIRST;
    }
  }
  break;

  case MODE_ID_RFID_FIRST:
  {
    Serial.println("üîÑ Ch·ªù qu√©t th·∫ª l·∫ßn 1...");
    display.clearDisplay();
    display.setCursor(20, 20);
    display.println("Put RFID");
    display.display();

    unsigned long timeout = millis() + 10000;
    while (!rfid.PICC_IsNewCardPresent() && millis() < timeout)
    {
      Serial.println("‚è≥ ƒêang qu√©t... ch∆∞a th·∫•y th·∫ª.");
      delay(500);
    }

    if (millis() >= timeout)
    {
      Serial.println("‚ö† Kh√¥ng ph√°t hi·ªán th·∫ª!");
      display.clearDisplay();
      display.setCursor(20, 30);
      display.println("NO CARD DETECTED");
      display.display();
      delay(2000);
      MODE_RFID = MODE_ID_RFID_ADD;
      return;
    }

    if (rfid.PICC_ReadCardSerial())
    {
      Serial.println("‚úÖ ƒê√£ ph√°t hi·ªán th·∫ª! ƒê·ªçc UID...");
      Serial.print("üÜî RFID TAG: ");

      for (byte i = 0; i < 4; i++)
      {
        firstScanTag[i] = rfid.uid.uidByte[i];
        Serial.print(firstScanTag[i], HEX);
        Serial.print(" ");
      }
      Serial.println();

      if (isAllowedRFIDTag(firstScanTag))
      {
        display.clearDisplay();
        display.setCursor(10, 30);
        display.println("RFID EXISTS");
        display.display();
        delay(2000);
        MODE_RFID = MODE_ID_RFID_ADD;
      }
      else
      {
        MODE_RFID = MODE_ID_RFID_SECOND;
      }
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
  break;

  case MODE_ID_RFID_SECOND:
  {
    Serial.println("üîÑ Ch·ªù qu√©t th·∫ª l·∫ßn 2...");
    display.clearDisplay();
    display.setCursor(10, 20);
    display.println("Put Again");
    display.display();
    delay(1000);

    unsigned long timeout = millis() + 10000;
    while (!rfid.PICC_IsNewCardPresent() && millis() < timeout)
    {
      Serial.println("‚è≥ ƒêang qu√©t l·∫ßn 2...");
      delay(500);
    }

    if (millis() >= timeout)
    {
      Serial.println("‚ö† Kh√¥ng ph√°t hi·ªán th·∫ª l·∫ßn 2!");
      display.clearDisplay();
      display.setCursor(20, 30);
      display.println("NO CARD DETECTED");
      display.display();
      delay(2000);
      MODE_RFID = MODE_ID_RFID_ADD;
      return;
    }

    if (rfid.PICC_ReadCardSerial())
    {
      byte secondScanTag[4];
      Serial.print("üîç RFID TAG (L·∫ßn 2): ");
      for (byte i = 0; i < 4; i++)
      {
        secondScanTag[i] = rfid.uid.uidByte[i];
        Serial.print(secondScanTag[i], HEX);
        Serial.print(" ");
      }
      Serial.println();

      if (memcmp(firstScanTag, secondScanTag, 4) != 0)
      {
        Serial.println("‚ö†Ô∏è Th·∫ª kh√¥ng kh·ªõp!");
        display.clearDisplay();
        display.setCursor(10, 30);
        display.println("MISMATCHED RFID");
        display.display();
        delay(2000);
        MODE_RFID = MODE_ID_RFID_ADD;
        return;
      }

      // ‚úÖ L∆∞u v√†o EEPROM
      Serial.println("üíæ Ghi EEPROM...");
      for (int i = 0; i < 4; i++)
      {
        EEPROM.write(10 + (id_rf - 1) * 4 + i, secondScanTag[i]);
      }
      EEPROM.commit();

      // ‚úÖ G·ª≠i d·ªØ li·ªáu l√™n server b·∫±ng GET
      if (WiFi.status() == WL_CONNECTED)
      {
        HTTPClient http;

        String url = String(server_rfid_url) + "?action=add"; // S·ª¨A ·ªû ƒê√ÇY
        url += "&id=" + String(id_rf);
        url += "&uid1=" + String(secondScanTag[0], HEX);
        url += "&uid2=" + String(secondScanTag[1], HEX);
        url += "&uid3=" + String(secondScanTag[2], HEX);
        url += "&uid4=" + String(secondScanTag[3], HEX);

        url.toUpperCase(); // T√πy ch·ªçn: cho UID in hoa
        printf("%s\n", url.c_str());
        Serial.println("üîó G·ª≠i URL: " + url); // B·∫ÆT BU·ªòC ƒë·ªÉ ki·ªÉm tra

        http.begin(url);
        int code = http.GET();
        String response = http.getString();

        Serial.print("üì° M√£ ph·∫£n h·ªìi: ");
        Serial.println(code);
        Serial.println("üì§ Server Response: " + response);
        http.end();
      }
      // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      display.clearDisplay();
      display.setCursor(10, 30);
      display.println("Add RFID Done");
      display.display();
      delay(2000);

      // ‚úÖ QUAN TR·ªåNG: Reset tr·∫°ng th√°i
      MODE_RFID = MODE_ID_RFID_ADD;
      id_rf = 0;
      Serial.println("‚úÖ ADD_OUT");
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
  break;
  }
}

void delRFID()
{
  char buffDisp[20];

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(30, 0);
  display.println("DELETE RFID");
  display.display();

  Serial.println("üìå DEL_IN");

  display.setCursor(10, 20);
  display.println("Input ID:");
  display.display();

  id_rf = numberInput(); // Nh·∫≠n ID t·ª´ b√†n ph√≠m
  if (id_rf == 0)        // ID #0 kh√¥ng h·ª£p l·ªá
  {
    display.clearDisplay();
    display.setCursor(30, 30);
    display.setTextColor(SSD1306_WHITE);
    display.println("ID ERROR");
    display.display();

    delay(2000);
  }
  else
  {
    for (int i = 0; i < 4; i++)
    {
      EEPROM.write(10 + (id_rf - 1) * 4 + i, '\0'); // X√≥a d·ªØ li·ªáu trong EEPROM
    }
    EEPROM.commit();
    if (WiFi.status() == WL_CONNECTED)
    {
      HTTPClient http;
      http.begin(server_rfid_url);
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      String postData = "action=delete&id=" + String(id_rf);
      int httpCode = http.POST(postData);
      String response = http.getString();

      Serial.println("üóëÔ∏è Delete RFID SQL: " + response);
      http.end();
    }
    sprintf(buffDisp, "Clear ID: %d Done", id_rf);

    display.clearDisplay();
    display.setCursor(10, 30);
    display.setTextColor(SSD1306_WHITE);
    display.println(buffDisp);
    display.display();

    Serial.println("‚úÖ DEL_OUT");
    delay(2000);
    display.clearDisplay();
    index_t = 0;
  }
}

void delAllRFID()
{
  char key = keypad.getKey();

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(15, 0);
  display.println("CLEAR ALL RFID?");
  display.display();

  if (key == '*')
  {
    isMode = 0; // Ch·ªçn YES
  }
  if (key == '#')
  {
    isMode = 1; // Ch·ªçn NO
  }

  if (isMode == 0) // Hi·ªÉn th·ªã l·ª±a ch·ªçn YES
  {
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 20);
    display.println("> YES");

    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 30);
    display.println("  NO");
  }
  if (isMode == 1) // Hi·ªÉn th·ªã l·ª±a ch·ªçn NO
  {
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 20);
    display.println("  YES");

    display.setTextColor(SSD1306_WHITE);
    display.setCursor(20, 30);
    display.println("> NO");
  }
  display.display(); // C·∫≠p nh·∫≠t m√†n h√¨nh OLED

  if (key == '0' && isMode == 0) // X√°c nh·∫≠n x√≥a to√†n b·ªô RFID
  {
    for (int i = 10; i < 512; i++)
    {
      EEPROM.write(i, '\0');
    }
    EEPROM.commit();
    // G·ª≠i l·ªánh x√≥a to√†n b·ªô l√™n server
    if (WiFi.status() == WL_CONNECTED)
    {
      HTTPClient http;
      http.begin(server_rfid_url);
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      String postData = "action=delete_all";
      int httpCode = http.POST(postData);
      String response = http.getString();

      Serial.println("üßπ Delete ALL RFID SQL: " + response);
      http.end();
    }
    Serial.println("‚úÖ T·∫•t c·∫£ RFID ƒë√£ b·ªã x√≥a!");

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(15, 20);
    display.println("CLEAR DONE");
    display.display();

    delay(2000);
    display.clearDisplay();
    index_t = 0;
  }

  if (key == '0' && isMode == 1) // Tho√°t m√† kh√¥ng x√≥a
  {
    display.clearDisplay();
    index_t = 0;
  }
}
void syncFromServer()
{
  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("‚ö† Kh√¥ng c√≥ WiFi, b·ªè qua sync.");
    return;
  }

  HTTPClient http;
  http.begin(server_rfid_url); // ƒê·ªãa ch·ªâ server PHP
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  int httpCode = http.POST("action=sync");

  if (httpCode == 200)
  {
    String payload = http.getString();
    Serial.println("üì• JSON t·ª´ server:");
    Serial.println(payload);

    StaticJsonDocument<2048> doc;
    DeserializationError error = deserializeJson(doc, payload);
    if (error)
    {
      Serial.println("‚ùå L·ªói ph√¢n t√≠ch JSON");
      return;
    }

    // üîê ƒê·ªìng b·ªô m·∫≠t kh·∫©u
    const char *pw_server = doc["password"];
    bool pass_diff = false;
    for (int i = 0; i < 5; i++)
    {
      if (EEPROM.read(i) != pw_server[i])
      {
        pass_diff = true;
        break;
      }
    }

    if (pass_diff)
    {
      Serial.println("üîÅ M·∫≠t kh·∫©u kh√°c, c·∫≠p nh·∫≠t EEPROM");
      for (int i = 0; i < 5; i++)
      {
        EEPROM.write(i, pw_server[i]);
        password[i] = pw_server[i];
      }
    }
    else
    {
      Serial.println("‚úÖ M·∫≠t kh·∫©u tr√πng, gi·ªØ nguy√™n");
    }

    // üîÅ ƒê·ªìng b·ªô RFID
    JsonArray list = doc["rfid_list"];
    for (JsonObject rfid : list)
    {
      int id = atoi(rfid["id"]);
      int addr = 10 + (id - 1) * 4;
      byte uid_server[4];

      for (int i = 0; i < 4; i++)
      {
        String key = "uid" + String(i + 1);
        const char *hexStr = rfid[key]; // Chu·ªói hex nh∆∞ "A3"
        uid_server[i] = (byte)strtol(hexStr, NULL, 16);

        Serial.print("üì¶ UID[");
        Serial.print(i);
        Serial.print("] = ");
        Serial.println(uid_server[i], HEX);
      }

      bool rfid_diff = false;
      for (int i = 0; i < 4; i++)
      {
        if (EEPROM.read(addr + i) != uid_server[i])
        {
          rfid_diff = true;
          break;
        }
      }

      if (rfid_diff)
      {
        Serial.print("üîÅ Ghi l·∫°i RFID ID ");
        Serial.println(id);
        for (int i = 0; i < 4; i++)
        {
          EEPROM.write(addr + i, uid_server[i]);
          Serial.print("üìù EEPROM[");
          Serial.print(addr + i);
          Serial.print("] = ");
          Serial.println(uid_server[i], HEX);
        }
      }
      else
      {
        Serial.print("‚úÖ RFID ID ");
        Serial.print(id);
        Serial.println(" tr√πng kh·ªõp");
      }
    }

    EEPROM.commit();
    Serial.println("‚úÖ ƒê·ªìng b·ªô ho√†n t·∫•t!");
    checkEEPROM(); // G·ª£i √Ω: In l·∫°i EEPROM sau khi sync
  }
  else
  {
    Serial.print("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i, m√£ l·ªói: ");
    Serial.println(httpCode);
  }

  http.end();
}

void setup()
{
  Serial.begin(115200);

  // üîÑ K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password_wifi);
  Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("üì° ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.localIP());
  syncFromServer(); // <=== G·ªåI ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU T·ª™ SQL
  EEPROM.begin(512);
  EEPROM.commit();
  checkEEPROM();
  // Kh·ªüi t·∫°o Stepper Motor
  stepper.setMaxSpeed(500);     // T·ªëc ƒë·ªô t·ªëi ƒëa (step/s)
  stepper.setAcceleration(300); // Gia t·ªëc

  // Kh·ªüi t·∫°o SPI v√† RFID
  SPI.begin();
  rfid.PCD_Init();

  // Kh·ªüi t·∫°o m√†n h√¨nh OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("‚ö†Ô∏è L·ªói kh·ªüi t·∫°o OLED!"));
    for (;;)
      ; // D·ª´ng ch∆∞∆°ng tr√¨nh n·∫øu kh√¥ng t√¨m th·∫•y m√†n h√¨nh
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("SYSTEM INIT...");
  display.display();

  readEpprom(); // ƒê·ªçc m·∫≠t kh·∫©u t·ª´ EEPROM
  delay(2000);

  // X√≥a m√†n h√¨nh sau khi hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi ƒë·ªông
  display.clearDisplay();
  display.display();

  Serial.print("üîë PASSWORD: ");
  Serial.println(password);

  // N·∫øu m·∫≠t kh·∫©u EEPROM ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p, ghi l·∫°i m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
  if (password[0] == 0xFF)
  {
    writeEpprom(pass_def);
    insertData(password, pass_def);
    Serial.print("üîë PASSWORD (M·ªõi): ");
    Serial.println(password);
  }
}

void loop()
{
  display.clearDisplay(); // X√≥a m√†n h√¨nh
  display.setTextSize(1); // C·ª° ch·ªØ nh·ªè h∆°n do OLED c√≥ ƒë·ªô ph√¢n gi·∫£i cao h∆°n LCD
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println("Enter Password:");
  display.display(); // C·∫≠p nh·∫≠t n·ªôi dung l√™n OLED
  checkPass();       // Ki·ªÉm tra m·∫≠t kh·∫©u nh·∫≠p v√†o
  rfidCheck();       // Ki·ªÉm tra RFID

  // C√°c tr·∫°ng th√°i kh√°c c·ªßa h·ªá th·ªëng
  while (index_t == 1)
  {
    changePass();
  }

  while (index_t == 2)
  {
    resetPass();
  }

  while (index_t == 3)
  {
    openDoor();
    error_pass = 0;
  }

  while (index_t == 4)
  {
    error();
    error_pass = 0;
  }

  while (index_t == 8)
  {
    addRFID();
  }

  while (index_t == 9)
  {
    delRFID();
  }

  while (index_t == 10)
  {
    delAllRFID();
  }
}
